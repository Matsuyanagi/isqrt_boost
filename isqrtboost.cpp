// isqrtboost.cpp : コンソール アプリケーションのエントリ ポイントを定義します。
//

#include "stdafx.h"
#include <string>
#include <boost/multiprecision/cpp_int.hpp>

namespace mp = boost::multiprecision;

/* 
wolframalpha
floor( sqrt (999999999999999999999999999999999999999) ) = 31622776601683793319
floor( sqrt (1844674407370955161518446744073709551615) ) = 42949672959999999999

                   0 : sqrt(                   0) =                    0
                  15 : sqrt(                  15) =                    3
                  53 : sqrt(                  53) =                    7
                 193 : sqrt(                 193) =                   13
                 456 : sqrt(                 456) =                   21
               46340 : sqrt(               46340) =                  215
          4200000000 : sqrt(          4200000000) =                64807
   12345678901234567 : sqrt(   12345678901234567) =            111111110
       1111111111111 : sqrt(       1111111111111) =              1054092
 9223372036854775807 : sqrt( 9223372036854775807) =           3037000499
18446744073709551615 : sqrt(18446744073709551615) =           4294967295
1844674407370955161518446744073709551615 : sqrt(1844674407370955161518446744073709551615) = 42949672959999999999
999999999999999999999999999999999999999 : sqrt(999999999999999999999999999999999999999) = 31622776601683793319
340282366920938463426481119284349108225 : sqrt(340282366920938463426481119284349108225) = 18446744073709551615

 */

int main()
{
	std::vector<mp::cpp_int> arr{ 0, 15, 53, 193, 456, 46340, 4200000000, 12345678901234567, 1111111111111, _I64_MAX, _UI64_MAX, _UI64_MAX };

	for each (mp::cpp_int a in arr)
	{
		printf("%20s : sqrt(%20s) = %20s\n", a.str().c_str(), a.str().c_str(), mp::sqrt(a).str().c_str());
		//		std::cout << a << std::endl;
	}

	std::vector<std::string> strs{ "0", "15", "53", "193", "456", "46340", "4200000000",
							"12345678901234567", "1111111111111", "9223372036854775807", "18446744073709551615",
							"1844674407370955161518446744073709551615",
							"999999999999999999999999999999999999999",
							"340282366920938463426481119284349108225", 		// 18446744073709551615 * 18446744073709551615 => 340282366920938463426481119284349108225
							  };

	for each ( std::string s in strs)
	{
		mp::cpp_int a( s );
		printf("%20s : sqrt(%20s) = %20s\n", a.str().c_str(), a.str().c_str(), mp::sqrt(a).str().c_str());
		//		std::cout << a << std::endl;
	}

    return 0;
}

